(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.i=function(value){return value};__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{configurable:false,enumerable:true,get:getter})}};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=0)})([function(module,exports){if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerComponent("websocket",{schema:{userType:{type:"string",default:"client"},roomId:{type:"string",default:"lobby"}},multiple:true,init:function(evt){var room=prompt("Please enter a room","Lobby");this.data.roomId=room;this.sendList={};this.deltaT=0;this.socket=io();if(location.pathname=="/controller"){this.data.userType="controller"}if(this.data.userType=="client"){this.socket.on("updateComponents",attributeList=>{for(i in attributeList){var currentAttribute=attributeList[i];this.el.setAttribute(i,currentAttribute)}})}},update:function(oldData){this.socket.emit("switchRoom",this.data);console.log(oldData)},remove:function(){},tick:function(t){if(this.data.userType=="controller"){if(t>this.deltaT+10){this.deltaT=t;var needsChange=false;var changedAttributes={};for(i of this.el.attributes){if(i.name!="id"){var currentAttributeProps=this.el.getAttribute(i.name);this.sendList[i.name]=this.sendList[i.name]||{};for(j in currentAttributeProps){if(typeof currentAttributeProps[j]!="function"){if(this.sendList[i.name][j]!==currentAttributeProps[j]){this.sendList[i.name][j]=currentAttributeProps[j];changedAttributes[i.name]=currentAttributeProps;needsChange=true}}}}}if(needsChange){console.log(changedAttributes);this.socket.emit("controlComponent",changedAttributes)}}}},pause:function(){},play:function(){}})}]);
